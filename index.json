{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | ConfigurableWarning Docs",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. [Unreleased] Added New Developer API (ConfigurableWarning.API) Added documentation built with DocFX Added CI for docs Added new days-per-quota patch Added new state cache Added new option loader Added [RegisterOption] annotation Added clamp toggles (via a patch to Zorro.Settings and ContentSettings) Added BoolOption, FloatOption, IntOption, and TextOption Added documentation comments to all API classes Changed Updated README Migrated existing settings to the new API Migrated patches to the new API Reorganized project Switched to Cake (Frosting) for builds Switched to Thunderstore CLI/Cake for packaging Switched mostly to Rider (for development) Moved the syncer from the Plugin class to an instance of OptionSyncer Improved code structure Moved namespaces to the top instead of a block Removed Removed old (legacy) package script Removed old days-per-quota patch [v1.12.0] - 2024-05-05 Added Added diving bell settings Changed Updated sync [v1.11.0] - 2024-05-02 Added Added depdendencies Changed Fixed settings sync (again) Made UI elements not borked Redid settings packing Fixed for CW's new May 2nd release [v1.10.2] - 2024-05-01 Changed Hopefully fix settings sync [v1.10.1] - 2024-05-01 Changed Actually fixed the build [v1.10.0] - 2024-04-29 Changed Updated settings UI to be cleaner Switched fully to Mycelium Networking Cached settings values Building in release mode! (Yes, I wasn't before.) Removed BepInEx config because it kinda broke stuff [v1.9.2] - 2024-04-19 Changed Fixed settings sync [v1.9.1] - 2024-04-18 Changed Nothing, just updated the README. :) [v1.9.0] - 2024-04-18 Changed Refactored UI Moved to using ContentSettings and MyceliumNetworking [v1.8.1] - 2024-04-12 Changed Fixed a default config value Hopefully fix the lobby patch [v1.8.0] - 2024-04-12 Changed Fixed health & days left HUD to actually reflect the correct value (in real time) [v1.7.1] - 2024-04-12 Changed Fixed lobby stuff (I actually applied the patch this time!) Fixed patches not using nameof [v1.7.0] - 2024-04-12 Added Modified ContentSettings API is now built-in Settings patch TextSetting and TextSettingsUI for blank \"settings\" (basically a label/divider) Common*Setting classes for ease Basic register & setup function for settings (DX stuff) Changed Reorganized settings to make it easier to work with Fixed a few issues Made the patches better We no longer rely on ContentSettings! [v1.6.0] - 2024-04-11 Added Added oxygen refill-related settings Added private lobbies patch & config Changed Changed the sprint multiplier max from 4 to 10 [v1.5.0] - 2024-04-11 Changed Moved to weird(-er) patching methods instead of overwriting methods for maximum compatibility (pretend that had echo in it) Removed redundant stuff Made config sync hopefully better Hopefully didn't break anything üôè"
  },
  "api/ConfigurableWarning.API.ConfigurableWarningAPI.html": {
    "href": "api/ConfigurableWarning.API.ConfigurableWarningAPI.html",
    "title": "Class ConfigurableWarningAPI | ConfigurableWarning Docs",
    "keywords": "Class ConfigurableWarningAPI Namespace ConfigurableWarning.API Assembly RedstoneWizard08.ConfigurableWarning.dll ConfigurableWarning's main API entrypoint. public static class ConfigurableWarningAPI Inheritance object ConfigurableWarningAPI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Sync The global instance of OptionSyncer. public static OptionSyncer Sync { get; } Property Value OptionSyncer"
  },
  "api/ConfigurableWarning.API.OptionLoader.html": {
    "href": "api/ConfigurableWarning.API.OptionLoader.html",
    "title": "Class OptionLoader | ConfigurableWarning Docs",
    "keywords": "Class OptionLoader Namespace ConfigurableWarning.API Assembly RedstoneWizard08.ConfigurableWarning.dll Responsible for loading, holding, and registering options. public static class OptionLoader Inheritance object OptionLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterOptions() Automatically collect and register all options annotated with RegisterOption. public static void RegisterOptions()"
  },
  "api/ConfigurableWarning.API.OptionManager.html": {
    "href": "api/ConfigurableWarning.API.OptionManager.html",
    "title": "Class OptionManager | ConfigurableWarning Docs",
    "keywords": "Class OptionManager Namespace ConfigurableWarning.API Assembly RedstoneWizard08.ConfigurableWarning.dll Manages options' loading, saving, registration, and accessing. public class OptionManager Inheritance object OptionManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance The current instance of this OptionManager. public static OptionManager Instance { get; } Property Value OptionManager SaveLoader The internally used instance of the Zorro.Settings.DefaultSettingsSaveLoad. public static DefaultSettingsSaveLoad SaveLoader { get; } Property Value DefaultSettingsSaveLoad Methods Get(string) Gets an option by its name. public IUntypedOption Get(string name) Parameters name string The option's name. Returns IUntypedOption The untyped form of the option. Register(IUntypedOption) Registers an untyped option, initializing and setting it up. public void Register(IUntypedOption opt) Parameters opt IUntypedOption The option to register. Register<T>(IOption<T>) Registers a typed option, initializing and setting it up. This will convert it to a IUntypedOption. public void Register<T>(IOption<T> opt) Parameters opt IOption<T> The option to register. Type Parameters T The option's value type."
  },
  "api/ConfigurableWarning.API.OptionSyncer.html": {
    "href": "api/ConfigurableWarning.API.OptionSyncer.html",
    "title": "Class OptionSyncer | ConfigurableWarning Docs",
    "keywords": "Class OptionSyncer Namespace ConfigurableWarning.API Assembly RedstoneWizard08.ConfigurableWarning.dll Handles syncing all the options in OptionsState using the MyceliumNetworking.MyceliumNetwork API. public class OptionSyncer Inheritance object OptionSyncer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ResetCache() Resets cached values to force a re-sync. public void ResetCache() SyncSettings() Send the data to all connected clients and sync current values in the OptionsState. public void SyncSettings() SyncSettingsRecv(string) The receiving end of the sync RPC. Applies new values when called. [CustomRPC] public void SyncSettingsRecv(string data) Parameters data string The JSON-encoded data string."
  },
  "api/ConfigurableWarning.API.Options.BoolOption.html": {
    "href": "api/ConfigurableWarning.API.Options.BoolOption.html",
    "title": "Class BoolOption | ConfigurableWarning Docs",
    "keywords": "Class BoolOption Namespace ConfigurableWarning.API.Options Assembly RedstoneWizard08.ConfigurableWarning.dll A boolean option. This must be inherited from to use. Its state is stored in the OptionsState class. public class BoolOption : BoolSetting, IDisposable, IOption<bool>, ICustomSetting, IExposedSetting, IUntypedOption Inheritance object Setting BoolSetting BoolOption Implements IDisposable IOption<bool> ICustomSetting IExposedSetting IUntypedOption Inherited Members BoolSetting.Load(ISettingsSaveLoad) BoolSetting.Save(ISettingsSaveLoad) BoolSetting.SetValue(bool, ISettingHandler) BoolSetting.GetSettingUICell() BoolSetting.GetDebugUI(ISettingHandler) BoolSetting.Expose(bool) BoolSetting.Value Setting.Dispose() Setting.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoolOption(string, bool, string, string, string) Initialize a IOption<T> with the bool type. protected BoolOption(string name, bool defaultValue, string displayName, string tab, string category) Parameters name string The option's name. defaultValue bool The default value. displayName string The option's displayed name. tab string The tab to register to. category string The category to register to. BoolOption(string, bool, string, string, string, Action<BoolOption>[]?) Initialize a IOption<T> with the bool type. protected BoolOption(string name, bool defaultValue, string displayName, string tab, string category, Action<BoolOption>[]? actions) Parameters name string The option's name. defaultValue bool The default value. displayName string The option's displayed name. tab string The tab to register to. category string The category to register to. actions Action<BoolOption>[] Functions to run when the value is applied. Methods ApplyValue() Applies the value. This is run when the user changes the value. This will sync it, update the state, and run any apply actions. public override void ApplyValue() AsOption() Get this as an IOption<T>. This is used for accessing default methods. public IOption<bool> AsOption() Returns IOption<bool> This as an IOption<T>. AsUntyped() Get this option as an IUntypedOption public IUntypedOption AsUntyped() Returns IUntypedOption The IUntypedOption form of this. GetDefaultValue() Gets the default value for the setting. public override bool GetDefaultValue() Returns bool The default value for the setting. GetDisplayName() Get the display name of this option. public string GetDisplayName() Returns string The option's display name. GetName() Gets this option's name. This is its name in the registry and in the state holder. public string GetName() Returns string The option's name. GetValue() Gets the current value of the option. WARNING! THIS MAY NOT ALWAYS BE CORRECT! USE THE STATE HOLDER INSTEAD! public bool GetValue() Returns bool The (potential) value of this option. RegisterSetting(string, string) Registers this setting with Content Settings. You probably want to use Register(string, string) instead. public void RegisterSetting(string tab, string category) Parameters tab string The tab to register to. category string The category this option belongs to. SetValue(bool) Sets the option's value. This will NOT update it in the state! public void SetValue(bool value) Parameters value bool The new value. SetValue(object) Sets the option's value. This will NOT update it in the state! public void SetValue(object value) Parameters value object The new value."
  },
  "api/ConfigurableWarning.API.Options.FloatOption.html": {
    "href": "api/ConfigurableWarning.API.Options.FloatOption.html",
    "title": "Class FloatOption | ConfigurableWarning Docs",
    "keywords": "Class FloatOption Namespace ConfigurableWarning.API.Options Assembly RedstoneWizard08.ConfigurableWarning.dll A float option. This must be inherited from to use. Its state is stored in the OptionsState class. public class FloatOption : FloatSetting, IDisposable, IOption<float>, ICustomSetting, IExposedSetting, IUntypedOption Inheritance object Setting FloatSetting FloatOption Implements IDisposable IOption<float> ICustomSetting IExposedSetting IUntypedOption Inherited Members FloatSetting.Load(ISettingsSaveLoad) FloatSetting.Save(ISettingsSaveLoad) FloatSetting.GetDebugUI(ISettingHandler) FloatSetting.GetSettingUICell() FloatSetting.SetValue(float, ISettingHandler) FloatSetting.Clamp(float) FloatSetting.Expose(float) FloatSetting.Value FloatSetting.MinValue FloatSetting.MaxValue Setting.Dispose() Setting.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FloatOption(string, float, string, float, float, string, string, Action<FloatOption>[]?, bool) Initialize a IOption<T> with the float type. protected FloatOption(string name, float defaultValue, string displayName, float min, float max, string tab, string category, Action<FloatOption>[]? actions, bool doClamp = true) Parameters name string The option's name. defaultValue float The default value. displayName string The option's displayed name. min float The minimum value. max float The maximum value. tab string The tab to register to. category string The category to register to. actions Action<FloatOption>[] Functions to run when the value is applied. doClamp bool Whether or not to clamp the value when changed. FloatOption(string, float, string, float, float, string, string, bool) Initialize a IOption<T> with the float type. protected FloatOption(string name, float defaultValue, string displayName, float min, float max, string tab, string category, bool doClamp = true) Parameters name string The option's name. defaultValue float The default value. displayName string The option's displayed name. min float The minimum value. max float The maximum value. tab string The tab to register to. category string The category to register to. doClamp bool Whether or not to clamp the value when changed. Methods ApplyValue() Applies the value. This is run when the user changes the value. This will sync it, update the state, and run any apply actions. public override void ApplyValue() AsOption() Get this as an IOption<T>. This is used for accessing default methods. public IOption<float> AsOption() Returns IOption<float> This as an IOption<T>. AsUntyped() Get this option as an IUntypedOption public IUntypedOption AsUntyped() Returns IUntypedOption The IUntypedOption form of this. GetDefaultValue() public override float GetDefaultValue() Returns float GetDisplayName() Get the display name of this option. public string GetDisplayName() Returns string The option's display name. GetMinMaxValue() public override float2 GetMinMaxValue() Returns float2 GetName() Gets this option's name. This is its name in the registry and in the state holder. public string GetName() Returns string The option's name. GetValue() Gets the current value of the option. WARNING! THIS MAY NOT ALWAYS BE CORRECT! USE THE STATE HOLDER INSTEAD! public float GetValue() Returns float The (potential) value of this option. RegisterSetting(string, string) Registers this setting with Content Settings. You probably want to use Register(string, string) instead. public void RegisterSetting(string tab, string category) Parameters tab string The tab to register to. category string The category this option belongs to. SetValue(object) Sets the option's value. This will NOT update it in the state! public void SetValue(object value) Parameters value object The new value. SetValue(float) Sets the option's value. This will NOT update it in the state! public void SetValue(float value) Parameters value float The new value."
  },
  "api/ConfigurableWarning.API.Options.IOption-1.html": {
    "href": "api/ConfigurableWarning.API.Options.IOption-1.html",
    "title": "Interface IOption<T> | ConfigurableWarning Docs",
    "keywords": "Interface IOption<T> Namespace ConfigurableWarning.API.Options Assembly RedstoneWizard08.ConfigurableWarning.dll Represents an option. This interface is implemented by all options. public interface IOption<T> : ICustomSetting, IExposedSetting Type Parameters T The option's value type. Inherited Members ICustomSetting.IExposedSetting.GetSettingCategory() IExposedSetting.GetSettingCategory() Methods AsOption() Get this as an IOption<T>. This is used for accessing default methods. IOption<T> AsOption() Returns IOption<T> This as an IOption<T>. AsUntyped() Get this option as an IUntypedOption IUntypedOption AsUntyped() Returns IUntypedOption The IUntypedOption form of this. GetDefaultValue() Get this option's default value. T GetDefaultValue() Returns T The option's default value. GetDisplayName() Get the display name of this option. string GetDisplayName() Returns string The option's display name. GetName() Gets this option's name. This is its name in the registry and in the state holder. string GetName() Returns string The option's name. GetValue() Gets the current value of the option. WARNING! THIS MAY NOT ALWAYS BE CORRECT! USE THE STATE HOLDER INSTEAD! T GetValue() Returns T The (potential) value of this option. Register(string, string) Registers this option to Content Settings, sets up its state, and registers it to the OptionManager. void Register(string tab, string category) Parameters tab string The tab to register to. category string The category this option belongs to. RegisterSetting(string, string) Registers this setting with Content Settings. You probably want to use Register(string, string) instead. void RegisterSetting(string tab, string category) Parameters tab string The tab to register to. category string The category this option belongs to. SetValue(T) Sets the option's value. This will NOT update it in the state! void SetValue(T value) Parameters value T The new value."
  },
  "api/ConfigurableWarning.API.Options.IUntypedOption.html": {
    "href": "api/ConfigurableWarning.API.Options.IUntypedOption.html",
    "title": "Interface IUntypedOption | ConfigurableWarning Docs",
    "keywords": "Interface IUntypedOption Namespace ConfigurableWarning.API.Options Assembly RedstoneWizard08.ConfigurableWarning.dll A simplified version of IOption<T> that has no type argument, and uses objects instead (with casts). public interface IUntypedOption Methods GetName() Gets this option's name. This is its name in the registry and in the state holder. string GetName() Returns string The option's name. GetValue() Gets the current value of the option. WARNING! THIS MAY NOT ALWAYS BE CORRECT! USE THE STATE HOLDER INSTEAD! object GetValue() Returns object The (potential) value of this option. SetValue(object) Sets the option's value. This will NOT update it in the state! void SetValue(object value) Parameters value object The new value."
  },
  "api/ConfigurableWarning.API.Options.IntOption.html": {
    "href": "api/ConfigurableWarning.API.Options.IntOption.html",
    "title": "Class IntOption | ConfigurableWarning Docs",
    "keywords": "Class IntOption Namespace ConfigurableWarning.API.Options Assembly RedstoneWizard08.ConfigurableWarning.dll An int option. This must be inherited from to use. Its state is stored in the OptionsState class. public class IntOption : IntSetting, IDisposable, IOption<int>, ICustomSetting, IExposedSetting, IUntypedOption Inheritance object Setting IntSetting IntOption Implements IDisposable IOption<int> ICustomSetting IExposedSetting IUntypedOption Inherited Members IntSetting.Load(ISettingsSaveLoad) IntSetting.Save(ISettingsSaveLoad) IntSetting.SetValue(int, ISettingHandler) IntSetting.GetDebugUI(ISettingHandler) IntSetting.GetSettingUICell() IntSetting.Expose(int) IntSetting.Clamp(int) IntSetting.Value IntSetting.MinValue IntSetting.MaxValue Setting.Dispose() Setting.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntOption(string, int, string, int, int, string, string, Action<IntOption>[]?, bool) Initialize a IOption<T> with the int type. protected IntOption(string name, int defaultValue, string displayName, int min, int max, string tab, string category, Action<IntOption>[]? actions, bool doClamp = true) Parameters name string The option's name. defaultValue int The default value. displayName string The option's displayed name. min int The minimum value. max int The maximum value. tab string The tab to register to. category string The category to register to. actions Action<IntOption>[] Functions to run when the value is applied. doClamp bool Whether or not to clamp the value when changed. IntOption(string, int, string, int, int, string, string, bool) Initialize a IOption<T> with the int type. protected IntOption(string name, int defaultValue, string displayName, int min, int max, string tab, string category, bool doClamp = true) Parameters name string The option's name. defaultValue int The default value. displayName string The option's displayed name. min int The minimum value. max int The maximum value. tab string The tab to register to. category string The category to register to. doClamp bool Whether or not to clamp the value when changed. Methods ApplyValue() Applies the value. This is run when the user changes the value. This will sync it, update the state, and run any apply actions. public override void ApplyValue() AsOption() Get this as an IOption<T>. This is used for accessing default methods. public IOption<int> AsOption() Returns IOption<int> This as an IOption<T>. AsUntyped() Get this option as an IUntypedOption public IUntypedOption AsUntyped() Returns IUntypedOption The IUntypedOption form of this. GetDefaultValue() Gets the value of the setting as an integer. public override int GetDefaultValue() Returns int The default value for the setting. GetDisplayName() Get the display name of this option. public string GetDisplayName() Returns string The option's display name. GetMinMaxValue() Gets the minimum and maximum value of the setting. public override (int, int) GetMinMaxValue() Returns (int, int) A tuple containing the minimum and maximum value of the setting. GetName() Gets this option's name. This is its name in the registry and in the state holder. public string GetName() Returns string The option's name. GetValue() Gets the current value of the option. WARNING! THIS MAY NOT ALWAYS BE CORRECT! USE THE STATE HOLDER INSTEAD! public int GetValue() Returns int The (potential) value of this option. RegisterSetting(string, string) Registers this setting with Content Settings. You probably want to use Register(string, string) instead. public void RegisterSetting(string tab, string category) Parameters tab string The tab to register to. category string The category this option belongs to. SetValue(int) Sets the option's value. This will NOT update it in the state! public void SetValue(int value) Parameters value int The new value. SetValue(object) Sets the option's value. This will NOT update it in the state! public void SetValue(object value) Parameters value object The new value."
  },
  "api/ConfigurableWarning.API.Options.TextOption.html": {
    "href": "api/ConfigurableWarning.API.Options.TextOption.html",
    "title": "Class TextOption | ConfigurableWarning Docs",
    "keywords": "Class TextOption Namespace ConfigurableWarning.API.Options Assembly RedstoneWizard08.ConfigurableWarning.dll A string option. This must be inherited from to use. Its state is stored in the OptionsState class. public class TextOption : TextSetting, IDisposable, IOption<string>, ICustomSetting, IExposedSetting, IUntypedOption Inheritance object Setting TextSetting TextOption Implements IDisposable IOption<string> ICustomSetting IExposedSetting IUntypedOption Inherited Members TextSetting.Load(ISettingsSaveLoad) TextSetting.Save(ISettingsSaveLoad) TextSetting.SetValue(string, ISettingHandler) TextSetting.GetSettingUICell() TextSetting.GetDebugUI(ISettingHandler) TextSetting.Expose(string) TextSetting.Value Setting.Dispose() Setting.Update() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextOption(string, string, string, string, string) Initialize a IOption<T> with the string type. protected TextOption(string name, string defaultValue, string displayName, string tab, string category) Parameters name string The option's name. defaultValue string The default value. displayName string The option's displayed name. tab string The tab to register to. category string The category to register to. TextOption(string, string, string, string, string, Action<TextOption>[]?) Initialize a IOption<T> with the string type. public TextOption(string name, string defaultValue, string displayName, string tab, string category, Action<TextOption>[]? actions) Parameters name string The option's name. defaultValue string The default value. displayName string The option's displayed name. tab string The tab to register to. category string The category to register to. actions Action<TextOption>[] Functions to run when the value is applied. Methods ApplyValue() Applies the value. This is run when the user changes the value. This will sync it, update the state, and run any apply actions. public override void ApplyValue() AsOption() Get this as an IOption<T>. This is used for accessing default methods. public IOption<string> AsOption() Returns IOption<string> This as an IOption<T>. AsUntyped() Get this option as an IUntypedOption public IUntypedOption AsUntyped() Returns IUntypedOption The IUntypedOption form of this. GetDefaultValue() Get the default value for the setting. public override string GetDefaultValue() Returns string The default value for the setting. GetDisplayName() Get the display name of this option. public string GetDisplayName() Returns string The option's display name. GetName() Gets this option's name. This is its name in the registry and in the state holder. public string GetName() Returns string The option's name. GetValue() Gets the current value of the option. WARNING! THIS MAY NOT ALWAYS BE CORRECT! USE THE STATE HOLDER INSTEAD! public string GetValue() Returns string The (potential) value of this option. RegisterSetting(string, string) Registers this setting with Content Settings. You probably want to use Register(string, string) instead. public void RegisterSetting(string tab, string category) Parameters tab string The tab to register to. category string The category this option belongs to. SetValue(object) Sets the option's value. This will NOT update it in the state! public void SetValue(object value) Parameters value object The new value. SetValue(string) Sets the option's value. This will NOT update it in the state! public void SetValue(string value) Parameters value string The new value."
  },
  "api/ConfigurableWarning.API.Options.html": {
    "href": "api/ConfigurableWarning.API.Options.html",
    "title": "Namespace ConfigurableWarning.API.Options | ConfigurableWarning Docs",
    "keywords": "Namespace ConfigurableWarning.API.Options Classes BoolOption A boolean option. This must be inherited from to use. Its state is stored in the OptionsState class. FloatOption A float option. This must be inherited from to use. Its state is stored in the OptionsState class. IntOption An int option. This must be inherited from to use. Its state is stored in the OptionsState class. TextOption A string option. This must be inherited from to use. Its state is stored in the OptionsState class. Interfaces IOption<T> Represents an option. This interface is implemented by all options. IUntypedOption A simplified version of IOption<T> that has no type argument, and uses objects instead (with casts)."
  },
  "api/ConfigurableWarning.API.OptionsState.html": {
    "href": "api/ConfigurableWarning.API.OptionsState.html",
    "title": "Class OptionsState | ConfigurableWarning Docs",
    "keywords": "Class OptionsState Namespace ConfigurableWarning.API Assembly RedstoneWizard08.ConfigurableWarning.dll The class responsible for storing options' values. public class OptionsState Inheritance object OptionsState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance The current instance of this OptionsState. public static OptionsState Instance { get; } Property Value OptionsState Methods Apply(string) Replaces all states with the JSON-encoded map provided, removing any not present in the provided string, and replacing all that are already present. public void Apply(string json) Parameters json string The JSON-encoded map. Clear() Clears all states from the internal dictionary, unregistering all of its options. This does NOT unregister ANYTHING from the OptionManager or ContentSettings' ContentSettings.API.SettingsLoader. public void Clear() Collect() Collect and serialize (with Newtonsoft.Json.JsonConvert) all registered states to a JSON string. public string Collect() Returns string The JSON-formatted states. Get<T>(IOption<T>) Gets the value of an option. This will forward to Get<T>(string) based on GetName(). public T? Get<T>(IOption<T> opt) Parameters opt IOption<T> The option to reference. Returns T The option's value. Type Parameters T The option's value type. Get<T>(string) Gets an option's value from the internal storage. public T? Get<T>(string name) Parameters name string The option's name. Returns T The option's value. Type Parameters T The value type. Has<T>(IOption<T>) Returns true if the option is registered in the state. public bool Has<T>(IOption<T> opt) Parameters opt IOption<T> The option to reference. Returns bool True if the option has a value in the state. Type Parameters T The option's value type. Has<T>(string) Returns true if the option is registered in the state. public bool Has<T>(string name) Parameters name string The option's name. Returns bool True if the option has a value in the state. Type Parameters T The option's value type. Register<T>(IOption<T>) Registers a typed option to the state. public void Register<T>(IOption<T> opt) Parameters opt IOption<T> The option to register. Type Parameters T The option's value type. Remove<T>(IOption<T>) Removes the option's value from the state, unregistering it. This does NOT unregister it from the OptionManager or ContentSettings' ContentSettings.API.SettingsLoader. public void Remove<T>(IOption<T> opt) Parameters opt IOption<T> The option to remove. Type Parameters T The option's value type. Remove<T>(string) Removes the option's value from the state, unregistering it. This does NOT unregister it from the OptionManager or ContentSettings' ContentSettings.API.SettingsLoader. public void Remove<T>(string name) Parameters name string The option's name. Type Parameters T The option's value type. Set<T>(IOption<T>, T) Sets the provided option's state. public void Set<T>(IOption<T> opt, T value) Parameters opt IOption<T> The option to set for. value T The new value. Type Parameters T The option's value type. Set<T>(string, T) Sets the state based on the option's name. public void Set<T>(string name, T value) Parameters name string The option's name. value T The new value. Type Parameters T The value type. Update<T>(IOption<T>) Updates an option's value in the state. This will set the value in the state to its contained value. public void Update<T>(IOption<T> opt) Parameters opt IOption<T> The option. Type Parameters T The option's value type."
  },
  "api/ConfigurableWarning.API.RegisterOption.html": {
    "href": "api/ConfigurableWarning.API.RegisterOption.html",
    "title": "Class RegisterOption | ConfigurableWarning Docs",
    "keywords": "Class RegisterOption Namespace ConfigurableWarning.API Assembly RedstoneWizard08.ConfigurableWarning.dll Automatically registers the option. This will initialize it in the state, register it with Content Settings, and load its default value if the value is not present. [MeansImplicitUse] [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class RegisterOption : Attribute Inheritance object Attribute RegisterOption Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ConfigurableWarning.API.html": {
    "href": "api/ConfigurableWarning.API.html",
    "title": "Namespace ConfigurableWarning.API | ConfigurableWarning Docs",
    "keywords": "Namespace ConfigurableWarning.API Namespaces ConfigurableWarning.API.Options Classes ConfigurableWarningAPI ConfigurableWarning's main API entrypoint. OptionLoader Responsible for loading, holding, and registering options. OptionManager Manages options' loading, saving, registration, and accessing. OptionSyncer Handles syncing all the options in OptionsState using the MyceliumNetworking.MyceliumNetwork API. OptionsState The class responsible for storing options' values. RegisterOption Automatically registers the option. This will initialize it in the state, register it with Content Settings, and load its default value if the value is not present."
  },
  "api/ConfigurableWarning.Settings.BuiltInSettings.Keys.html": {
    "href": "api/ConfigurableWarning.Settings.BuiltInSettings.Keys.html",
    "title": "Class BuiltInSettings.Keys | ConfigurableWarning Docs",
    "keywords": "Class BuiltInSettings.Keys Namespace ConfigurableWarning.Settings Assembly RedstoneWizard08.ConfigurableWarning.dll The string names of each setting. public static class BuiltInSettings.Keys Inheritance object BuiltInSettings.Keys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DaysPerQuota public const string DaysPerQuota = \"DaysPerQuota\" Field Value string Health public const string Health = \"Health\" Field Value string InfiniteOxygen public const string InfiniteOxygen = \"InfiniteOxygen\" Field Value string MaxStamina public const string MaxStamina = \"MaxStamina\" Field Value string Oxygen public const string Oxygen = \"Oxygen\" Field Value string OxygenRefillRate public const string OxygenRefillRate = \"OxygenRefillRate\" Field Value string OxygenUsageMultiplier public const string OxygenUsageMultiplier = \"OxygenUsageMultiplier\" Field Value string PrivateHost public const string PrivateHost = \"PrivateHost\" Field Value string RefillOxygenInDiveBell public const string RefillOxygenInDiveBell = \"RefillOxygenInDiveBell\" Field Value string RefillOxygenOnSurface public const string RefillOxygenOnSurface = \"RefillOxygenOnSurface\" Field Value string RequireAllPlayersInDiveBell public const string RequireAllPlayersInDiveBell = \"RequireAllPlayersInDiveBell\" Field Value string RequireDiveBellDoorClosed public const string RequireDiveBellDoorClosed = \"RequireDiveBellDoorClosed\" Field Value string SprintMultiplier public const string SprintMultiplier = \"SprintMultiplier\" Field Value string SprintSpeed public const string SprintSpeed = \"SprintSpeed\" Field Value string StaminaRegenRate public const string StaminaRegenRate = \"StaminaRegenRate\" Field Value string UseOxygenInDiveBell public const string UseOxygenInDiveBell = \"UseOxygenInDiveBell\" Field Value string UseOxygenOnSurface public const string UseOxygenOnSurface = \"UseOxygenOnSurface\" Field Value string"
  },
  "api/ConfigurableWarning.Settings.BuiltInSettings.html": {
    "href": "api/ConfigurableWarning.Settings.BuiltInSettings.html",
    "title": "Class BuiltInSettings | ConfigurableWarning Docs",
    "keywords": "Class BuiltInSettings Namespace ConfigurableWarning.Settings Assembly RedstoneWizard08.ConfigurableWarning.dll ConfigurableWarning's built-in settings. public static class BuiltInSettings Inheritance object BuiltInSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ConfigurableWarning.Settings.SettingsUtil.html": {
    "href": "api/ConfigurableWarning.Settings.SettingsUtil.html",
    "title": "Class SettingsUtil | ConfigurableWarning Docs",
    "keywords": "Class SettingsUtil Namespace ConfigurableWarning.Settings Assembly RedstoneWizard08.ConfigurableWarning.dll ConfigurableWarning's settings utilities. public static class SettingsUtil Inheritance object SettingsUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UpdateQuotaDays(IntOption) Updates remaining days in the game's quota days counter. public static void UpdateQuotaDays(IntOption _opt) Parameters _opt IntOption The option (see DaysPerQuota)."
  },
  "api/ConfigurableWarning.Settings.html": {
    "href": "api/ConfigurableWarning.Settings.html",
    "title": "Namespace ConfigurableWarning.Settings | ConfigurableWarning Docs",
    "keywords": "Namespace ConfigurableWarning.Settings Classes BuiltInSettings ConfigurableWarning's built-in settings. BuiltInSettings.Keys The string names of each setting. SettingsUtil ConfigurableWarning's settings utilities."
  },
  "api/ConfigurableWarning.html": {
    "href": "api/ConfigurableWarning.html",
    "title": "Namespace ConfigurableWarning | ConfigurableWarning Docs",
    "keywords": "Namespace ConfigurableWarning Namespaces ConfigurableWarning.API ConfigurableWarning.Settings"
  },
  "guides/quickstart/getting-started.html": {
    "href": "guides/quickstart/getting-started.html",
    "title": "Getting Started | ConfigurableWarning Docs",
    "keywords": "Getting Started With ConfigurableWarning, getting started is easy! Installing After setting up a new BepInEx mod, you can add the package to your project using the following: CLI CSProj dotnet add package RedstoneWizard08.ConfigurableWarning <PackageReference Include=\"RedstoneWizard08.ConfigurableWarning\" Version=\"1.13.0\" IncludeAssets=\"compile\" ExcludeAssets=\"RUNTIME\" /> Note ConfigurableWarning is not yet actually published on NuGet. This is what it will be like in the future! Your First Option To create an option, you'll need a few things. You'll start with the class: [RegisterOption] private class MyOption() : IntOption(\"MyOption\", 50, \"My Option!\", 0, 100, \"MY STUFF\", \"GENERAL\"); You'll notice a few things here. Let's break it down. The [RegisterOption] comes from RegisterOption, and tells ConfigurableWarning to automatically register your option to the game, meaning that you don't have to do that! The inherited class, IntOption, defines this as an IOption<T> with the bool type for its value. This constructor takes a few arguments, namely: The option's name - Here it's MyOption. This is used in the registry, and the end-user will likely never see it. The default value - Here it's 50. The option's display name - Here it's \"My Option!\". This is what the user will see in the settings menu. The minimum value - Here it's 0. This is the minumum value that the slider will go to. The maximum value - Here it's 100. This is the maximum value that the slider will go to. The tab - Here it's \"MY STUFF\". This will be the tab that the setting shows up in. The category - Here it's \"GENERAL\". This will be the category that the setting appears under. Tip To see all of the option types and constructors, look at the API reference! See ConfigurableWarning.API.Options. Notes Unfortunately, due to the nature of how Zorro's Settings API works, each option has to be its own class. This API is built on top of ContentSettings, they did some amazing work! This API is a work-in-progress! Things may change at any time!"
  },
  "guides/quickstart/introduction.html": {
    "href": "guides/quickstart/introduction.html",
    "title": "Introduction to ConfigurableWarning | ConfigurableWarning Docs",
    "keywords": "Introduction Welcome to our docs! ConfigurableWarning is a mod for Content Warning that allows you to change several aspects of the game that you can't normally change. ConfigurableWarning also has a handy developer API which is documented right here! API Docs: ConfigurableWarning.API Get Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "ConfigurableWarning | ConfigurableWarning Docs",
    "keywords": "ConfigurableWarning Makes the game configurable! This is a quality-of-life mod to help you make the game as hard (or as easy) as you want! Get Started"
  }
}